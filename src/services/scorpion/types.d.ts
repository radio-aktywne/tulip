/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export type paths = {
  "/.well-known/jwks.json": {
    delete?: never;
    /**
     * Discover Well-Known JSON Web Keys
     * @description This endpoint returns JSON Web Keys required to verifying OpenID Connect ID Tokens and,
     *     if enabled, OAuth 2.0 JWT Access Tokens. This endpoint can be used with client libraries like
     *     [node-jwks-rsa](https://github.com/auth0/node-jwks-rsa) among others.
     *
     *     Adding custom keys requires first creating a keyset via the createJsonWebKeySet operation,
     *     and then configuring the webfinger.jwks.broadcast_keys configuration value to include the keyset name.
     */
    get: operations["discoverJsonWebKeys"];
    head?: never;
    options?: never;
    parameters: {
      cookie?: never;
      header?: never;
      path?: never;
      query?: never;
    };
    patch?: never;
    post?: never;
    put?: never;
    trace?: never;
  };
  "/.well-known/openid-configuration": {
    delete?: never;
    /**
     * OpenID Connect Discovery
     * @description A mechanism for an OpenID Connect Relying Party to discover the End-User's OpenID Provider and obtain information needed to interact with it, including its OAuth 2.0 endpoint locations.
     *
     *     Popular libraries for OpenID Connect clients include oidc-client-js (JavaScript), go-oidc (Golang), and others.
     *     For a full list of clients go here: https://openid.net/developers/certified/
     */
    get: operations["discoverOidcConfiguration"];
    head?: never;
    options?: never;
    parameters: {
      cookie?: never;
      header?: never;
      path?: never;
      query?: never;
    };
    patch?: never;
    post?: never;
    put?: never;
    trace?: never;
  };
  "/oauth2/auth": {
    delete?: never;
    /**
     * OAuth 2.0 Authorize Endpoint
     * @description Use open source libraries to perform OAuth 2.0 and OpenID Connect
     *     available for any programming language. You can find a list of libraries at https://oauth.net/code/
     *
     *     This endpoint should not be used via the Ory SDK and is only included for technical reasons.
     *     Instead, use one of the libraries linked above.
     */
    get: operations["oAuth2Authorize"];
    head?: never;
    options?: never;
    parameters: {
      cookie?: never;
      header?: never;
      path?: never;
      query?: never;
    };
    patch?: never;
    post?: never;
    put?: never;
    trace?: never;
  };
  "/oauth2/revoke": {
    delete?: never;
    get?: never;
    head?: never;
    options?: never;
    parameters: {
      cookie?: never;
      header?: never;
      path?: never;
      query?: never;
    };
    patch?: never;
    /**
     * Revoke OAuth 2.0 Access or Refresh Token
     * @description Revoking a token (both access and refresh) means that the tokens will be invalid. A revoked access token can no
     *     longer be used to make access requests, and a revoked refresh token can no longer be used to refresh an access token.
     *     Revoking a refresh token also invalidates the access token that was created with it. A token may only be revoked by
     *     the client the token was generated for.
     */
    post: operations["revokeOAuth2Token"];
    put?: never;
    trace?: never;
  };
  "/oauth2/sessions/logout": {
    delete?: never;
    /**
     * OpenID Connect Front- and Back-channel Enabled Logout
     * @description This endpoint initiates and completes user logout at the Ory OAuth2 & OpenID provider and initiates OpenID Connect Front- / Back-channel logout:
     *
     *     https://openid.net/specs/openid-connect-frontchannel-1_0.html
     *     https://openid.net/specs/openid-connect-backchannel-1_0.html
     *
     *     Back-channel logout is performed asynchronously and does not affect logout flow.
     */
    get: operations["revokeOidcSession"];
    head?: never;
    options?: never;
    parameters: {
      cookie?: never;
      header?: never;
      path?: never;
      query?: never;
    };
    patch?: never;
    post?: never;
    put?: never;
    trace?: never;
  };
  "/oauth2/token": {
    delete?: never;
    get?: never;
    head?: never;
    options?: never;
    parameters: {
      cookie?: never;
      header?: never;
      path?: never;
      query?: never;
    };
    patch?: never;
    /**
     * The OAuth 2.0 Token Endpoint
     * @description Use open source libraries to perform OAuth 2.0 and OpenID Connect
     *     available for any programming language. You can find a list of libraries here https://oauth.net/code/
     *
     *     This endpoint should not be used via the Ory SDK and is only included for technical reasons.
     *     Instead, use one of the libraries linked above.
     */
    post: operations["oauth2TokenExchange"];
    put?: never;
    trace?: never;
  };
  "/userinfo": {
    delete?: never;
    /**
     * OpenID Connect Userinfo
     * @description This endpoint returns the payload of the ID Token, including `session.id_token` values, of
     *     the provided OAuth 2.0 Access Token's consent request.
     *
     *     In the case of authentication error, a WWW-Authenticate header might be set in the response
     *     with more information about the error. See [the spec](https://datatracker.ietf.org/doc/html/rfc6750#section-3)
     *     for more details about header format.
     */
    get: operations["getOidcUserInfo"];
    head?: never;
    options?: never;
    parameters: {
      cookie?: never;
      header?: never;
      path?: never;
      query?: never;
    };
    patch?: never;
    post?: never;
    put?: never;
    trace?: never;
  };
};
export type webhooks = { [key: string]: never };
export type components = {
  headers: never;
  parameters: never;
  pathItems: never;
  requestBodies: never;
  responses: never;
  schemas: {
    /**
     * Verifiable Credentials Metadata (Draft 00)
     * @description Includes information about the supported verifiable credentials.
     * @example {
     *       "types": [
     *         "types",
     *         "types"
     *       ],
     *       "cryptographic_suites_supported": [
     *         "cryptographic_suites_supported",
     *         "cryptographic_suites_supported"
     *       ],
     *       "cryptographic_binding_methods_supported": [
     *         "cryptographic_binding_methods_supported",
     *         "cryptographic_binding_methods_supported"
     *       ],
     *       "format": "format"
     *     }
     */
    credentialSupportedDraft00: {
      /** @description OpenID Connect Verifiable Credentials Cryptographic Binding Methods Supported
       *
       *     Contains a list of cryptographic binding methods supported for signing the proof. */
      cryptographic_binding_methods_supported?: string[];
      /** @description OpenID Connect Verifiable Credentials Cryptographic Suites Supported
       *
       *     Contains a list of cryptographic suites methods supported for signing the proof. */
      cryptographic_suites_supported?: string[];
      /** @description OpenID Connect Verifiable Credentials Format
       *
       *     Contains the format that is supported by this authorization server. */
      format?: string;
      /** @description OpenID Connect Verifiable Credentials Types
       *
       *     Contains the types of verifiable credentials supported. */
      types?: string[];
    };
    /**
     * @description Error
     * @example {
     *       "error_debug": "error_debug",
     *       "status_code": 401,
     *       "error_description": "error_description",
     *       "error": "error",
     *       "error_hint": "The redirect URL is not allowed."
     *     }
     */
    errorOAuth2: {
      /** @description Error */
      error?: string;
      /** @description Error Debug Information
       *
       *     Only available in dev mode. */
      error_debug?: string;
      /** @description Error Description */
      error_description?: string;
      /**
       * @description Error Hint
       *
       *     Helps the user identify the error cause.
       * @example The redirect URL is not allowed.
       */
      error_hint?: string;
      /**
       * Format: int64
       * @description HTTP Status Code
       * @example 401
       */
      status_code?: number;
    };
    /** @example {
     *       "d": "T_N8I-6He3M8a7X1vWt6TGIx4xB_GP3Mb4SsZSA4v-orvJzzRiQhLlRR81naWYxfQAYt5isDI6_C2L9bdWo4FFPjGQFvNoRX-_sBJyBI_rl-TBgsZYoUlAj3J92WmY2inbA-PwyJfsaIIDceYBC-eX-xiCu6qMqkZi3MwQAFL6bMdPEM0z4JBcwFT3VdiWAIRUuACWQwrXMq672x7fMuaIaHi7XDGgt1ith23CLfaREmJku9PQcchbt_uEY-hqrFY6ntTtS4paWWQj86xLL94S-Tf6v6xkL918PfLSOTq6XCzxvlFwzBJqApnAhbwqLjpPhgUG04EDRrqrSBc5Y1BLevn6Ip5h1AhessBp3wLkQgz_roeckt-ybvzKTjESMuagnpqLvOT7Y9veIug2MwPJZI2VjczRc1vzMs25XrFQ8DpUy-bNdp89TmvAXwctUMiJdgHloJw23Cv03gIUAkDnsTqZmkpbIf-crpgNKFmQP_EDKoe8p_PXZZgfbRri3NoEVGP7Mk6yEu8LjJhClhZaBNjuWw2-KlBfOA3g79mhfBnkInee5KO9mGR50qPk1V-MorUYNTFMZIm0kFE6eYVWFBwJHLKYhHU34DoiK1VP-svZpC2uAMFNA_UJEwM9CQ2b8qe4-5e9aywMvwcuArRkAB5mBIfOaOJao3mfukKAE",
     *       "e": "AQAB",
     *       "crv": "P-256",
     *       "use": "sig",
     *       "kid": "1603dfe0af8f4596",
     *       "x5c": [
     *         "x5c",
     *         "x5c"
     *       ],
     *       "k": "GawgguFyGrWKav7AX4VKUg",
     *       "dp": "G4sPXkc6Ya9y8oJW9_ILj4xuppu0lzi_H7VTkS8xj5SdX3coE0oimYwxIi2emTAue0UOa5dpgFGyBJ4c8tQ2VF402XRugKDTP8akYhFo5tAA77Qe_NmtuYZc3C3m3I24G2GvR5sSDxUyAN2zq8Lfn9EUms6rY3Ob8YeiKkTiBj0",
     *       "dq": "s9lAH9fggBsoFR8Oac2R_E2gw282rT2kGOAhvIllETE1efrA6huUUvMfBcMpn8lqeW6vzznYY5SSQF7pMdC_agI3nG8Ibp1BUb0JUiraRNqUfLhcQb_d9GF4Dh7e74WbRsobRonujTYN1xCaP6TO61jvWrX-L18txXw494Q_cgk",
     *       "n": "vTqrxUyQPl_20aqf5kXHwDZrel-KovIp8s7ewJod2EXHl8tWlRB3_Rem34KwBfqlKQGp1nqah-51H4Jzruqe0cFP58hPEIt6WqrvnmJCXxnNuIB53iX_uUUXXHDHBeaPCSRoNJzNysjoJ30TIUsKBiirhBa7f235PXbKiHducLevV6PcKxJ5cY8zO286qJLBWSPm-OIevwqsIsSIH44Qtm9sioFikhkbLwoqwWORGAY0nl6XvVOlhADdLjBSqSAeT1FPuCDCnXwzCDR8N9IFB_IjdStFkC-rVt2K5BYfPd0c3yFp_vHR15eRd0zJ8XQ7woBC8Vnsac6Et1pKS59pX6256DPWu8UDdEOolKAPgcd_g2NpA76cAaF_jcT80j9KrEzw8Tv0nJBGesuCjPNjGs_KzdkWTUXt23Hn9QJsdc1MZuaW0iqXBepHYfYoqNelzVte117t4BwVp0kUM6we0IqyXClaZgOI8S-WDBw2_Ovdm8e5NmhYAblEVoygcX8Y46oH6bKiaCQfKCFDMcRgChme7AoE1yZZYsPbaG_3IjPrC4LBMHQw8rM9dWjJ8ImjicvZ1pAm0dx-KHCP3y5PVKrxBDf1zSOsBRkOSjB8TPODnJMz6-jd5hTtZxpZPwPoIdCanTZ3ZD6uRBpTmDwtpRGm63UQs1m5FWPwb0T2IF0",
     *       "p": "6NbkXwDWUhi-eR55Cgbf27FkQDDWIamOaDr0rj1q0f1fFEz1W5A_09YvG09Fiv1AO2-D8Rl8gS1Vkz2i0zCSqnyy8A025XOcRviOMK7nIxE4OH_PEsko8dtIrb3TmE2hUXvCkmzw9EsTF1LQBOGC6iusLTXepIC1x9ukCKFZQvdgtEObQ5kzd9Nhq-cdqmSeMVLoxPLd1blviVT9Vm8-y12CtYpeJHOaIDtVPLlBhJiBoPKWg3vxSm4XxIliNOefqegIlsmTIa3MpS6WWlCK3yHhat0Q-rRxDxdyiVdG_wzJvp0Iw_2wms7pe-PgNPYvUWH9JphWP5K38YqEBiJFXQ",
     *       "kty": "RSA",
     *       "q": "0A1FmpOWR91_RAWpqreWSavNaZb9nXeKiBo0DQGBz32DbqKqQ8S4aBJmbRhJcctjCLjain-ivut477tAUMmzJwVJDDq2MZFwC9Q-4VYZmFU4HJityQuSzHYe64RjN-E_NQ02TWhG3QGW6roq6c57c99rrUsETwJJiwS8M5p15Miuz53DaOjv-uqqFAFfywN5WkxHbraBcjHtMiQuyQbQqkCFh-oanHkwYNeytsNhTu2mQmwR5DR2roZ2nPiFjC6nsdk-A7E3S3wMzYYFw7jvbWWoYWo9vB40_MY2Y0FYQSqcDzcBIcq_0tnnasf3VW4Fdx6m80RzOb2Fsnln7vKXAQ",
     *       "qi": "GyM_p6JrXySiz1toFgKbWV-JdI3jQ4ypu9rbMWx3rQJBfmt0FoYzgUIZEVFEcOqwemRN81zoDAaa-Bk0KWNGDjJHZDdDmFhW3AN7lI-puxk_mHZGJ11rxyR8O55XLSe3SPmRfKwZI6yU24ZxvQKFYItdldUKGzO6Ia6zTKhAVRU",
     *       "x": "f83OJ3D2xF1Bg8vub9tLe1gHMzV76e8Tus9uPHvRVEU",
     *       "y": "x_FEzRu9m36HLN_tue659LNpXW6pCyStikYjKIWI5a0",
     *       "alg": "RS256"
     *     } */
    jsonWebKey: {
      /**
       * @description The "alg" (algorithm) parameter identifies the algorithm intended for
       *     use with the key.  The values used should either be registered in the
       *     IANA "JSON Web Signature and Encryption Algorithms" registry
       *     established by [JWA] or be a value that contains a Collision-
       *     Resistant Name.
       * @example RS256
       */
      alg: string;
      /** @example P-256 */
      crv?: string;
      /** @example T_N8I-6He3M8a7X1vWt6TGIx4xB_GP3Mb4SsZSA4v-orvJzzRiQhLlRR81naWYxfQAYt5isDI6_C2L9bdWo4FFPjGQFvNoRX-_sBJyBI_rl-TBgsZYoUlAj3J92WmY2inbA-PwyJfsaIIDceYBC-eX-xiCu6qMqkZi3MwQAFL6bMdPEM0z4JBcwFT3VdiWAIRUuACWQwrXMq672x7fMuaIaHi7XDGgt1ith23CLfaREmJku9PQcchbt_uEY-hqrFY6ntTtS4paWWQj86xLL94S-Tf6v6xkL918PfLSOTq6XCzxvlFwzBJqApnAhbwqLjpPhgUG04EDRrqrSBc5Y1BLevn6Ip5h1AhessBp3wLkQgz_roeckt-ybvzKTjESMuagnpqLvOT7Y9veIug2MwPJZI2VjczRc1vzMs25XrFQ8DpUy-bNdp89TmvAXwctUMiJdgHloJw23Cv03gIUAkDnsTqZmkpbIf-crpgNKFmQP_EDKoe8p_PXZZgfbRri3NoEVGP7Mk6yEu8LjJhClhZaBNjuWw2-KlBfOA3g79mhfBnkInee5KO9mGR50qPk1V-MorUYNTFMZIm0kFE6eYVWFBwJHLKYhHU34DoiK1VP-svZpC2uAMFNA_UJEwM9CQ2b8qe4-5e9aywMvwcuArRkAB5mBIfOaOJao3mfukKAE */
      d?: string;
      /** @example G4sPXkc6Ya9y8oJW9_ILj4xuppu0lzi_H7VTkS8xj5SdX3coE0oimYwxIi2emTAue0UOa5dpgFGyBJ4c8tQ2VF402XRugKDTP8akYhFo5tAA77Qe_NmtuYZc3C3m3I24G2GvR5sSDxUyAN2zq8Lfn9EUms6rY3Ob8YeiKkTiBj0 */
      dp?: string;
      /** @example s9lAH9fggBsoFR8Oac2R_E2gw282rT2kGOAhvIllETE1efrA6huUUvMfBcMpn8lqeW6vzznYY5SSQF7pMdC_agI3nG8Ibp1BUb0JUiraRNqUfLhcQb_d9GF4Dh7e74WbRsobRonujTYN1xCaP6TO61jvWrX-L18txXw494Q_cgk */
      dq?: string;
      /** @example AQAB */
      e?: string;
      /** @example GawgguFyGrWKav7AX4VKUg */
      k?: string;
      /**
       * @description The "kid" (key ID) parameter is used to match a specific key.  This
       *     is used, for instance, to choose among a set of keys within a JWK Set
       *     during key rollover.  The structure of the "kid" value is
       *     unspecified.  When "kid" values are used within a JWK Set, different
       *     keys within the JWK Set SHOULD use distinct "kid" values.  (One
       *     example in which different keys might use the same "kid" value is if
       *     they have different "kty" (key type) values but are considered to be
       *     equivalent alternatives by the application using them.)  The "kid"
       *     value is a case-sensitive string.
       * @example 1603dfe0af8f4596
       */
      kid: string;
      /**
       * @description The "kty" (key type) parameter identifies the cryptographic algorithm
       *     family used with the key, such as "RSA" or "EC". "kty" values should
       *     either be registered in the IANA "JSON Web Key Types" registry
       *     established by [JWA] or be a value that contains a Collision-
       *     Resistant Name.  The "kty" value is a case-sensitive string.
       * @example RSA
       */
      kty: string;
      /** @example vTqrxUyQPl_20aqf5kXHwDZrel-KovIp8s7ewJod2EXHl8tWlRB3_Rem34KwBfqlKQGp1nqah-51H4Jzruqe0cFP58hPEIt6WqrvnmJCXxnNuIB53iX_uUUXXHDHBeaPCSRoNJzNysjoJ30TIUsKBiirhBa7f235PXbKiHducLevV6PcKxJ5cY8zO286qJLBWSPm-OIevwqsIsSIH44Qtm9sioFikhkbLwoqwWORGAY0nl6XvVOlhADdLjBSqSAeT1FPuCDCnXwzCDR8N9IFB_IjdStFkC-rVt2K5BYfPd0c3yFp_vHR15eRd0zJ8XQ7woBC8Vnsac6Et1pKS59pX6256DPWu8UDdEOolKAPgcd_g2NpA76cAaF_jcT80j9KrEzw8Tv0nJBGesuCjPNjGs_KzdkWTUXt23Hn9QJsdc1MZuaW0iqXBepHYfYoqNelzVte117t4BwVp0kUM6we0IqyXClaZgOI8S-WDBw2_Ovdm8e5NmhYAblEVoygcX8Y46oH6bKiaCQfKCFDMcRgChme7AoE1yZZYsPbaG_3IjPrC4LBMHQw8rM9dWjJ8ImjicvZ1pAm0dx-KHCP3y5PVKrxBDf1zSOsBRkOSjB8TPODnJMz6-jd5hTtZxpZPwPoIdCanTZ3ZD6uRBpTmDwtpRGm63UQs1m5FWPwb0T2IF0 */
      n?: string;
      /** @example 6NbkXwDWUhi-eR55Cgbf27FkQDDWIamOaDr0rj1q0f1fFEz1W5A_09YvG09Fiv1AO2-D8Rl8gS1Vkz2i0zCSqnyy8A025XOcRviOMK7nIxE4OH_PEsko8dtIrb3TmE2hUXvCkmzw9EsTF1LQBOGC6iusLTXepIC1x9ukCKFZQvdgtEObQ5kzd9Nhq-cdqmSeMVLoxPLd1blviVT9Vm8-y12CtYpeJHOaIDtVPLlBhJiBoPKWg3vxSm4XxIliNOefqegIlsmTIa3MpS6WWlCK3yHhat0Q-rRxDxdyiVdG_wzJvp0Iw_2wms7pe-PgNPYvUWH9JphWP5K38YqEBiJFXQ */
      p?: string;
      /** @example 0A1FmpOWR91_RAWpqreWSavNaZb9nXeKiBo0DQGBz32DbqKqQ8S4aBJmbRhJcctjCLjain-ivut477tAUMmzJwVJDDq2MZFwC9Q-4VYZmFU4HJityQuSzHYe64RjN-E_NQ02TWhG3QGW6roq6c57c99rrUsETwJJiwS8M5p15Miuz53DaOjv-uqqFAFfywN5WkxHbraBcjHtMiQuyQbQqkCFh-oanHkwYNeytsNhTu2mQmwR5DR2roZ2nPiFjC6nsdk-A7E3S3wMzYYFw7jvbWWoYWo9vB40_MY2Y0FYQSqcDzcBIcq_0tnnasf3VW4Fdx6m80RzOb2Fsnln7vKXAQ */
      q?: string;
      /** @example GyM_p6JrXySiz1toFgKbWV-JdI3jQ4ypu9rbMWx3rQJBfmt0FoYzgUIZEVFEcOqwemRN81zoDAaa-Bk0KWNGDjJHZDdDmFhW3AN7lI-puxk_mHZGJ11rxyR8O55XLSe3SPmRfKwZI6yU24ZxvQKFYItdldUKGzO6Ia6zTKhAVRU */
      qi?: string;
      /**
       * @description Use ("public key use") identifies the intended use of
       *     the public key. The "use" parameter is employed to indicate whether
       *     a public key is used for encrypting data or verifying the signature
       *     on data. Values are commonly "sig" (signature) or "enc" (encryption).
       * @example sig
       */
      use: string;
      /** @example f83OJ3D2xF1Bg8vub9tLe1gHMzV76e8Tus9uPHvRVEU */
      x?: string;
      /** @description The "x5c" (X.509 certificate chain) parameter contains a chain of one
       *     or more PKIX certificates [RFC5280].  The certificate chain is
       *     represented as a JSON array of certificate value strings.  Each
       *     string in the array is a base64-encoded (Section 4 of [RFC4648] --
       *     not base64url-encoded) DER [ITU.X690.1994] PKIX certificate value.
       *     The PKIX certificate containing the key value MUST be the first
       *     certificate. */
      x5c?: string[];
      /** @example x_FEzRu9m36HLN_tue659LNpXW6pCyStikYjKIWI5a0 */
      y?: string;
    };
    /**
     * @description JSON Web Key Set
     * @example {
     *       "keys": [
     *         {
     *           "d": "T_N8I-6He3M8a7X1vWt6TGIx4xB_GP3Mb4SsZSA4v-orvJzzRiQhLlRR81naWYxfQAYt5isDI6_C2L9bdWo4FFPjGQFvNoRX-_sBJyBI_rl-TBgsZYoUlAj3J92WmY2inbA-PwyJfsaIIDceYBC-eX-xiCu6qMqkZi3MwQAFL6bMdPEM0z4JBcwFT3VdiWAIRUuACWQwrXMq672x7fMuaIaHi7XDGgt1ith23CLfaREmJku9PQcchbt_uEY-hqrFY6ntTtS4paWWQj86xLL94S-Tf6v6xkL918PfLSOTq6XCzxvlFwzBJqApnAhbwqLjpPhgUG04EDRrqrSBc5Y1BLevn6Ip5h1AhessBp3wLkQgz_roeckt-ybvzKTjESMuagnpqLvOT7Y9veIug2MwPJZI2VjczRc1vzMs25XrFQ8DpUy-bNdp89TmvAXwctUMiJdgHloJw23Cv03gIUAkDnsTqZmkpbIf-crpgNKFmQP_EDKoe8p_PXZZgfbRri3NoEVGP7Mk6yEu8LjJhClhZaBNjuWw2-KlBfOA3g79mhfBnkInee5KO9mGR50qPk1V-MorUYNTFMZIm0kFE6eYVWFBwJHLKYhHU34DoiK1VP-svZpC2uAMFNA_UJEwM9CQ2b8qe4-5e9aywMvwcuArRkAB5mBIfOaOJao3mfukKAE",
     *           "e": "AQAB",
     *           "crv": "P-256",
     *           "use": "sig",
     *           "kid": "1603dfe0af8f4596",
     *           "x5c": [
     *             "x5c",
     *             "x5c"
     *           ],
     *           "k": "GawgguFyGrWKav7AX4VKUg",
     *           "dp": "G4sPXkc6Ya9y8oJW9_ILj4xuppu0lzi_H7VTkS8xj5SdX3coE0oimYwxIi2emTAue0UOa5dpgFGyBJ4c8tQ2VF402XRugKDTP8akYhFo5tAA77Qe_NmtuYZc3C3m3I24G2GvR5sSDxUyAN2zq8Lfn9EUms6rY3Ob8YeiKkTiBj0",
     *           "dq": "s9lAH9fggBsoFR8Oac2R_E2gw282rT2kGOAhvIllETE1efrA6huUUvMfBcMpn8lqeW6vzznYY5SSQF7pMdC_agI3nG8Ibp1BUb0JUiraRNqUfLhcQb_d9GF4Dh7e74WbRsobRonujTYN1xCaP6TO61jvWrX-L18txXw494Q_cgk",
     *           "n": "vTqrxUyQPl_20aqf5kXHwDZrel-KovIp8s7ewJod2EXHl8tWlRB3_Rem34KwBfqlKQGp1nqah-51H4Jzruqe0cFP58hPEIt6WqrvnmJCXxnNuIB53iX_uUUXXHDHBeaPCSRoNJzNysjoJ30TIUsKBiirhBa7f235PXbKiHducLevV6PcKxJ5cY8zO286qJLBWSPm-OIevwqsIsSIH44Qtm9sioFikhkbLwoqwWORGAY0nl6XvVOlhADdLjBSqSAeT1FPuCDCnXwzCDR8N9IFB_IjdStFkC-rVt2K5BYfPd0c3yFp_vHR15eRd0zJ8XQ7woBC8Vnsac6Et1pKS59pX6256DPWu8UDdEOolKAPgcd_g2NpA76cAaF_jcT80j9KrEzw8Tv0nJBGesuCjPNjGs_KzdkWTUXt23Hn9QJsdc1MZuaW0iqXBepHYfYoqNelzVte117t4BwVp0kUM6we0IqyXClaZgOI8S-WDBw2_Ovdm8e5NmhYAblEVoygcX8Y46oH6bKiaCQfKCFDMcRgChme7AoE1yZZYsPbaG_3IjPrC4LBMHQw8rM9dWjJ8ImjicvZ1pAm0dx-KHCP3y5PVKrxBDf1zSOsBRkOSjB8TPODnJMz6-jd5hTtZxpZPwPoIdCanTZ3ZD6uRBpTmDwtpRGm63UQs1m5FWPwb0T2IF0",
     *           "p": "6NbkXwDWUhi-eR55Cgbf27FkQDDWIamOaDr0rj1q0f1fFEz1W5A_09YvG09Fiv1AO2-D8Rl8gS1Vkz2i0zCSqnyy8A025XOcRviOMK7nIxE4OH_PEsko8dtIrb3TmE2hUXvCkmzw9EsTF1LQBOGC6iusLTXepIC1x9ukCKFZQvdgtEObQ5kzd9Nhq-cdqmSeMVLoxPLd1blviVT9Vm8-y12CtYpeJHOaIDtVPLlBhJiBoPKWg3vxSm4XxIliNOefqegIlsmTIa3MpS6WWlCK3yHhat0Q-rRxDxdyiVdG_wzJvp0Iw_2wms7pe-PgNPYvUWH9JphWP5K38YqEBiJFXQ",
     *           "kty": "RSA",
     *           "q": "0A1FmpOWR91_RAWpqreWSavNaZb9nXeKiBo0DQGBz32DbqKqQ8S4aBJmbRhJcctjCLjain-ivut477tAUMmzJwVJDDq2MZFwC9Q-4VYZmFU4HJityQuSzHYe64RjN-E_NQ02TWhG3QGW6roq6c57c99rrUsETwJJiwS8M5p15Miuz53DaOjv-uqqFAFfywN5WkxHbraBcjHtMiQuyQbQqkCFh-oanHkwYNeytsNhTu2mQmwR5DR2roZ2nPiFjC6nsdk-A7E3S3wMzYYFw7jvbWWoYWo9vB40_MY2Y0FYQSqcDzcBIcq_0tnnasf3VW4Fdx6m80RzOb2Fsnln7vKXAQ",
     *           "qi": "GyM_p6JrXySiz1toFgKbWV-JdI3jQ4ypu9rbMWx3rQJBfmt0FoYzgUIZEVFEcOqwemRN81zoDAaa-Bk0KWNGDjJHZDdDmFhW3AN7lI-puxk_mHZGJ11rxyR8O55XLSe3SPmRfKwZI6yU24ZxvQKFYItdldUKGzO6Ia6zTKhAVRU",
     *           "x": "f83OJ3D2xF1Bg8vub9tLe1gHMzV76e8Tus9uPHvRVEU",
     *           "y": "x_FEzRu9m36HLN_tue659LNpXW6pCyStikYjKIWI5a0",
     *           "alg": "RS256"
     *         },
     *         {
     *           "d": "T_N8I-6He3M8a7X1vWt6TGIx4xB_GP3Mb4SsZSA4v-orvJzzRiQhLlRR81naWYxfQAYt5isDI6_C2L9bdWo4FFPjGQFvNoRX-_sBJyBI_rl-TBgsZYoUlAj3J92WmY2inbA-PwyJfsaIIDceYBC-eX-xiCu6qMqkZi3MwQAFL6bMdPEM0z4JBcwFT3VdiWAIRUuACWQwrXMq672x7fMuaIaHi7XDGgt1ith23CLfaREmJku9PQcchbt_uEY-hqrFY6ntTtS4paWWQj86xLL94S-Tf6v6xkL918PfLSOTq6XCzxvlFwzBJqApnAhbwqLjpPhgUG04EDRrqrSBc5Y1BLevn6Ip5h1AhessBp3wLkQgz_roeckt-ybvzKTjESMuagnpqLvOT7Y9veIug2MwPJZI2VjczRc1vzMs25XrFQ8DpUy-bNdp89TmvAXwctUMiJdgHloJw23Cv03gIUAkDnsTqZmkpbIf-crpgNKFmQP_EDKoe8p_PXZZgfbRri3NoEVGP7Mk6yEu8LjJhClhZaBNjuWw2-KlBfOA3g79mhfBnkInee5KO9mGR50qPk1V-MorUYNTFMZIm0kFE6eYVWFBwJHLKYhHU34DoiK1VP-svZpC2uAMFNA_UJEwM9CQ2b8qe4-5e9aywMvwcuArRkAB5mBIfOaOJao3mfukKAE",
     *           "e": "AQAB",
     *           "crv": "P-256",
     *           "use": "sig",
     *           "kid": "1603dfe0af8f4596",
     *           "x5c": [
     *             "x5c",
     *             "x5c"
     *           ],
     *           "k": "GawgguFyGrWKav7AX4VKUg",
     *           "dp": "G4sPXkc6Ya9y8oJW9_ILj4xuppu0lzi_H7VTkS8xj5SdX3coE0oimYwxIi2emTAue0UOa5dpgFGyBJ4c8tQ2VF402XRugKDTP8akYhFo5tAA77Qe_NmtuYZc3C3m3I24G2GvR5sSDxUyAN2zq8Lfn9EUms6rY3Ob8YeiKkTiBj0",
     *           "dq": "s9lAH9fggBsoFR8Oac2R_E2gw282rT2kGOAhvIllETE1efrA6huUUvMfBcMpn8lqeW6vzznYY5SSQF7pMdC_agI3nG8Ibp1BUb0JUiraRNqUfLhcQb_d9GF4Dh7e74WbRsobRonujTYN1xCaP6TO61jvWrX-L18txXw494Q_cgk",
     *           "n": "vTqrxUyQPl_20aqf5kXHwDZrel-KovIp8s7ewJod2EXHl8tWlRB3_Rem34KwBfqlKQGp1nqah-51H4Jzruqe0cFP58hPEIt6WqrvnmJCXxnNuIB53iX_uUUXXHDHBeaPCSRoNJzNysjoJ30TIUsKBiirhBa7f235PXbKiHducLevV6PcKxJ5cY8zO286qJLBWSPm-OIevwqsIsSIH44Qtm9sioFikhkbLwoqwWORGAY0nl6XvVOlhADdLjBSqSAeT1FPuCDCnXwzCDR8N9IFB_IjdStFkC-rVt2K5BYfPd0c3yFp_vHR15eRd0zJ8XQ7woBC8Vnsac6Et1pKS59pX6256DPWu8UDdEOolKAPgcd_g2NpA76cAaF_jcT80j9KrEzw8Tv0nJBGesuCjPNjGs_KzdkWTUXt23Hn9QJsdc1MZuaW0iqXBepHYfYoqNelzVte117t4BwVp0kUM6we0IqyXClaZgOI8S-WDBw2_Ovdm8e5NmhYAblEVoygcX8Y46oH6bKiaCQfKCFDMcRgChme7AoE1yZZYsPbaG_3IjPrC4LBMHQw8rM9dWjJ8ImjicvZ1pAm0dx-KHCP3y5PVKrxBDf1zSOsBRkOSjB8TPODnJMz6-jd5hTtZxpZPwPoIdCanTZ3ZD6uRBpTmDwtpRGm63UQs1m5FWPwb0T2IF0",
     *           "p": "6NbkXwDWUhi-eR55Cgbf27FkQDDWIamOaDr0rj1q0f1fFEz1W5A_09YvG09Fiv1AO2-D8Rl8gS1Vkz2i0zCSqnyy8A025XOcRviOMK7nIxE4OH_PEsko8dtIrb3TmE2hUXvCkmzw9EsTF1LQBOGC6iusLTXepIC1x9ukCKFZQvdgtEObQ5kzd9Nhq-cdqmSeMVLoxPLd1blviVT9Vm8-y12CtYpeJHOaIDtVPLlBhJiBoPKWg3vxSm4XxIliNOefqegIlsmTIa3MpS6WWlCK3yHhat0Q-rRxDxdyiVdG_wzJvp0Iw_2wms7pe-PgNPYvUWH9JphWP5K38YqEBiJFXQ",
     *           "kty": "RSA",
     *           "q": "0A1FmpOWR91_RAWpqreWSavNaZb9nXeKiBo0DQGBz32DbqKqQ8S4aBJmbRhJcctjCLjain-ivut477tAUMmzJwVJDDq2MZFwC9Q-4VYZmFU4HJityQuSzHYe64RjN-E_NQ02TWhG3QGW6roq6c57c99rrUsETwJJiwS8M5p15Miuz53DaOjv-uqqFAFfywN5WkxHbraBcjHtMiQuyQbQqkCFh-oanHkwYNeytsNhTu2mQmwR5DR2roZ2nPiFjC6nsdk-A7E3S3wMzYYFw7jvbWWoYWo9vB40_MY2Y0FYQSqcDzcBIcq_0tnnasf3VW4Fdx6m80RzOb2Fsnln7vKXAQ",
     *           "qi": "GyM_p6JrXySiz1toFgKbWV-JdI3jQ4ypu9rbMWx3rQJBfmt0FoYzgUIZEVFEcOqwemRN81zoDAaa-Bk0KWNGDjJHZDdDmFhW3AN7lI-puxk_mHZGJ11rxyR8O55XLSe3SPmRfKwZI6yU24ZxvQKFYItdldUKGzO6Ia6zTKhAVRU",
     *           "x": "f83OJ3D2xF1Bg8vub9tLe1gHMzV76e8Tus9uPHvRVEU",
     *           "y": "x_FEzRu9m36HLN_tue659LNpXW6pCyStikYjKIWI5a0",
     *           "alg": "RS256"
     *         }
     *       ]
     *     }
     */
    jsonWebKeySet: {
      /** @description List of JSON Web Keys
       *
       *     The value of the "keys" parameter is an array of JSON Web Key (JWK)
       *     values. By default, the order of the JWK values within the array does
       *     not imply an order of preference among them, although applications
       *     of JWK Sets can choose to assign a meaning to the order for their
       *     purposes, if desired. */
      keys?: components["schemas"]["jsonWebKey"][];
    };
    /**
     * @description OAuth2 Token Exchange Result
     * @example {
     *       "access_token": "access_token",
     *       "refresh_token": "refresh_token",
     *       "scope": "scope",
     *       "id_token": "id_token",
     *       "token_type": "token_type",
     *       "expires_in": 0
     *     }
     */
    oAuth2TokenExchange: {
      /** @description The access token issued by the authorization server. */
      access_token?: string;
      /**
       * Format: int64
       * @description The lifetime in seconds of the access token. For
       *     example, the value "3600" denotes that the access token will
       *     expire in one hour from the time the response was generated.
       */
      expires_in?: number;
      /** @description To retrieve a refresh token request the id_token scope. */
      id_token?: string;
      /** @description The refresh token, which can be used to obtain new
       *     access tokens. To retrieve it add the scope "offline" to your access token request. */
      refresh_token?: string;
      /** @description The scope of the access token */
      scope?: string;
      /** @description The type of the token issued */
      token_type?: string;
    };
    oauth2TokenExchange_request: {
      client_id?: string;
      client_secret?: string;
      code?: string;
      grant_type: string;
      redirect_uri?: string;
      refresh_token?: string;
    };
    /**
     * OpenID Connect Discovery Metadata
     * @description Includes links to several endpoints (for example `/oauth2/token`) and exposes information on supported signature algorithms
     *     among others.
     * @example {
     *       "request_parameter_supported": true,
     *       "claims_parameter_supported": true,
     *       "backchannel_logout_supported": true,
     *       "scopes_supported": [
     *         "scopes_supported",
     *         "scopes_supported"
     *       ],
     *       "issuer": "https://playground.ory.sh/ory-hydra/public/",
     *       "userinfo_signed_response_alg": [
     *         "userinfo_signed_response_alg",
     *         "userinfo_signed_response_alg"
     *       ],
     *       "authorization_endpoint": "https://playground.ory.sh/ory-hydra/public/oauth2/auth",
     *       "claims_supported": [
     *         "claims_supported",
     *         "claims_supported"
     *       ],
     *       "userinfo_signing_alg_values_supported": [
     *         "userinfo_signing_alg_values_supported",
     *         "userinfo_signing_alg_values_supported"
     *       ],
     *       "token_endpoint_auth_methods_supported": [
     *         "token_endpoint_auth_methods_supported",
     *         "token_endpoint_auth_methods_supported"
     *       ],
     *       "backchannel_logout_session_supported": true,
     *       "response_modes_supported": [
     *         "response_modes_supported",
     *         "response_modes_supported"
     *       ],
     *       "id_token_signed_response_alg": [
     *         "id_token_signed_response_alg",
     *         "id_token_signed_response_alg"
     *       ],
     *       "token_endpoint": "https://playground.ory.sh/ory-hydra/public/oauth2/token",
     *       "response_types_supported": [
     *         "response_types_supported",
     *         "response_types_supported"
     *       ],
     *       "request_uri_parameter_supported": true,
     *       "grant_types_supported": [
     *         "grant_types_supported",
     *         "grant_types_supported"
     *       ],
     *       "end_session_endpoint": "end_session_endpoint",
     *       "revocation_endpoint": "revocation_endpoint",
     *       "userinfo_endpoint": "userinfo_endpoint",
     *       "frontchannel_logout_supported": true,
     *       "require_request_uri_registration": true,
     *       "code_challenge_methods_supported": [
     *         "code_challenge_methods_supported",
     *         "code_challenge_methods_supported"
     *       ],
     *       "credentials_endpoint_draft_00": "credentials_endpoint_draft_00",
     *       "frontchannel_logout_session_supported": true,
     *       "jwks_uri": "https://{slug}.projects.oryapis.com/.well-known/jwks.json",
     *       "credentials_supported_draft_00": [
     *         {
     *           "types": [
     *             "types",
     *             "types"
     *           ],
     *           "cryptographic_suites_supported": [
     *             "cryptographic_suites_supported",
     *             "cryptographic_suites_supported"
     *           ],
     *           "cryptographic_binding_methods_supported": [
     *             "cryptographic_binding_methods_supported",
     *             "cryptographic_binding_methods_supported"
     *           ],
     *           "format": "format"
     *         },
     *         {
     *           "types": [
     *             "types",
     *             "types"
     *           ],
     *           "cryptographic_suites_supported": [
     *             "cryptographic_suites_supported",
     *             "cryptographic_suites_supported"
     *           ],
     *           "cryptographic_binding_methods_supported": [
     *             "cryptographic_binding_methods_supported",
     *             "cryptographic_binding_methods_supported"
     *           ],
     *           "format": "format"
     *         }
     *       ],
     *       "subject_types_supported": [
     *         "subject_types_supported",
     *         "subject_types_supported"
     *       ],
     *       "id_token_signing_alg_values_supported": [
     *         "id_token_signing_alg_values_supported",
     *         "id_token_signing_alg_values_supported"
     *       ],
     *       "registration_endpoint": "https://playground.ory.sh/ory-hydra/admin/client",
     *       "request_object_signing_alg_values_supported": [
     *         "request_object_signing_alg_values_supported",
     *         "request_object_signing_alg_values_supported"
     *       ]
     *     }
     */
    oidcConfiguration: {
      /**
       * @description OAuth 2.0 Authorization Endpoint URL
       * @example https://playground.ory.sh/ory-hydra/public/oauth2/auth
       */
      authorization_endpoint: string;
      /** @description OpenID Connect Back-Channel Logout Session Required
       *
       *     Boolean value specifying whether the OP can pass a sid (session ID) Claim in the Logout Token to identify the RP
       *     session with the OP. If supported, the sid Claim is also included in ID Tokens issued by the OP */
      backchannel_logout_session_supported?: boolean;
      /** @description OpenID Connect Back-Channel Logout Supported
       *
       *     Boolean value specifying whether the OP supports back-channel logout, with true indicating support. */
      backchannel_logout_supported?: boolean;
      /** @description OpenID Connect Claims Parameter Parameter Supported
       *
       *     Boolean value specifying whether the OP supports use of the claims parameter, with true indicating support. */
      claims_parameter_supported?: boolean;
      /** @description OpenID Connect Supported Claims
       *
       *     JSON array containing a list of the Claim Names of the Claims that the OpenID Provider MAY be able to supply
       *     values for. Note that for privacy or other reasons, this might not be an exhaustive list. */
      claims_supported?: string[];
      /** @description OAuth 2.0 PKCE Supported Code Challenge Methods
       *
       *     JSON array containing a list of Proof Key for Code Exchange (PKCE) [RFC7636] code challenge methods supported
       *     by this authorization server. */
      code_challenge_methods_supported?: string[];
      /** @description OpenID Connect Verifiable Credentials Endpoint
       *
       *     Contains the URL of the Verifiable Credentials Endpoint. */
      credentials_endpoint_draft_00?: string;
      /** @description OpenID Connect Verifiable Credentials Supported
       *
       *     JSON array containing a list of the Verifiable Credentials supported by this authorization server. */
      credentials_supported_draft_00?: components["schemas"]["credentialSupportedDraft00"][];
      /** @description OpenID Connect End-Session Endpoint
       *
       *     URL at the OP to which an RP can perform a redirect to request that the End-User be logged out at the OP. */
      end_session_endpoint?: string;
      /** @description OpenID Connect Front-Channel Logout Session Required
       *
       *     Boolean value specifying whether the OP can pass iss (issuer) and sid (session ID) query parameters to identify
       *     the RP session with the OP when the frontchannel_logout_uri is used. If supported, the sid Claim is also
       *     included in ID Tokens issued by the OP. */
      frontchannel_logout_session_supported?: boolean;
      /** @description OpenID Connect Front-Channel Logout Supported
       *
       *     Boolean value specifying whether the OP supports HTTP-based logout, with true indicating support. */
      frontchannel_logout_supported?: boolean;
      /** @description OAuth 2.0 Supported Grant Types
       *
       *     JSON array containing a list of the OAuth 2.0 Grant Type values that this OP supports. */
      grant_types_supported?: string[];
      /** @description OpenID Connect Default ID Token Signing Algorithms
       *
       *     Algorithm used to sign OpenID Connect ID Tokens. */
      id_token_signed_response_alg: string[];
      /** @description OpenID Connect Supported ID Token Signing Algorithms
       *
       *     JSON array containing a list of the JWS signing algorithms (alg values) supported by the OP for the ID Token
       *     to encode the Claims in a JWT. */
      id_token_signing_alg_values_supported: string[];
      /**
       * @description OpenID Connect Issuer URL
       *
       *     An URL using the https scheme with no query or fragment component that the OP asserts as its IssuerURL Identifier.
       *     If IssuerURL discovery is supported , this value MUST be identical to the issuer value returned
       *     by WebFinger. This also MUST be identical to the iss Claim value in ID Tokens issued from this IssuerURL.
       * @example https://playground.ory.sh/ory-hydra/public/
       */
      issuer: string;
      /**
       * @description OpenID Connect Well-Known JSON Web Keys URL
       *
       *     URL of the OP's JSON Web Key Set [JWK] document. This contains the signing key(s) the RP uses to validate
       *     signatures from the OP. The JWK Set MAY also contain the Server's encryption key(s), which are used by RPs
       *     to encrypt requests to the Server. When both signing and encryption keys are made available, a use (Key Use)
       *     parameter value is REQUIRED for all keys in the referenced JWK Set to indicate each key's intended usage.
       *     Although some algorithms allow the same key to be used for both signatures and encryption, doing so is
       *     NOT RECOMMENDED, as it is less secure. The JWK x5c parameter MAY be used to provide X.509 representations of
       *     keys provided. When used, the bare key values MUST still be present and MUST match those in the certificate.
       * @example https://{slug}.projects.oryapis.com/.well-known/jwks.json
       */
      jwks_uri: string;
      /**
       * @description OpenID Connect Dynamic Client Registration Endpoint URL
       * @example https://playground.ory.sh/ory-hydra/admin/client
       */
      registration_endpoint?: string;
      /** @description OpenID Connect Supported Request Object Signing Algorithms
       *
       *     JSON array containing a list of the JWS signing algorithms (alg values) supported by the OP for Request Objects,
       *     which are described in Section 6.1 of OpenID Connect Core 1.0 [OpenID.Core]. These algorithms are used both when
       *     the Request Object is passed by value (using the request parameter) and when it is passed by reference
       *     (using the request_uri parameter). */
      request_object_signing_alg_values_supported?: string[];
      /** @description OpenID Connect Request Parameter Supported
       *
       *     Boolean value specifying whether the OP supports use of the request parameter, with true indicating support. */
      request_parameter_supported?: boolean;
      /** @description OpenID Connect Request URI Parameter Supported
       *
       *     Boolean value specifying whether the OP supports use of the request_uri parameter, with true indicating support. */
      request_uri_parameter_supported?: boolean;
      /** @description OpenID Connect Requires Request URI Registration
       *
       *     Boolean value specifying whether the OP requires any request_uri values used to be pre-registered
       *     using the request_uris registration parameter. */
      require_request_uri_registration?: boolean;
      /** @description OAuth 2.0 Supported Response Modes
       *
       *     JSON array containing a list of the OAuth 2.0 response_mode values that this OP supports. */
      response_modes_supported?: string[];
      /** @description OAuth 2.0 Supported Response Types
       *
       *     JSON array containing a list of the OAuth 2.0 response_type values that this OP supports. Dynamic OpenID
       *     Providers MUST support the code, id_token, and the token id_token Response Type values. */
      response_types_supported: string[];
      /** @description OAuth 2.0 Token Revocation URL
       *
       *     URL of the authorization server's OAuth 2.0 revocation endpoint. */
      revocation_endpoint?: string;
      /** @description OAuth 2.0 Supported Scope Values
       *
       *     JSON array containing a list of the OAuth 2.0 [RFC6749] scope values that this server supports. The server MUST
       *     support the openid scope value. Servers MAY choose not to advertise some supported scope values even when this parameter is used */
      scopes_supported?: string[];
      /** @description OpenID Connect Supported Subject Types
       *
       *     JSON array containing a list of the Subject Identifier types that this OP supports. Valid types include
       *     pairwise and public. */
      subject_types_supported: string[];
      /**
       * @description OAuth 2.0 Token Endpoint URL
       * @example https://playground.ory.sh/ory-hydra/public/oauth2/token
       */
      token_endpoint: string;
      /** @description OAuth 2.0 Supported Client Authentication Methods
       *
       *     JSON array containing a list of Client Authentication methods supported by this Token Endpoint. The options are
       *     client_secret_post, client_secret_basic, client_secret_jwt, and private_key_jwt, as described in Section 9 of OpenID Connect Core 1.0 */
      token_endpoint_auth_methods_supported?: string[];
      /** @description OpenID Connect Userinfo URL
       *
       *     URL of the OP's UserInfo Endpoint. */
      userinfo_endpoint?: string;
      /** @description OpenID Connect User Userinfo Signing Algorithm
       *
       *     Algorithm used to sign OpenID Connect Userinfo Responses. */
      userinfo_signed_response_alg: string[];
      /** @description OpenID Connect Supported Userinfo Signing Algorithm
       *
       *     JSON array containing a list of the JWS [JWS] signing algorithms (alg values) [JWA] supported by the UserInfo Endpoint to encode the Claims in a JWT [JWT]. */
      userinfo_signing_alg_values_supported?: string[];
    };
    /**
     * @description OpenID Connect Userinfo
     * @example {
     *       "sub": "sub",
     *       "website": "website",
     *       "zoneinfo": "zoneinfo",
     *       "birthdate": "birthdate",
     *       "email_verified": true,
     *       "gender": "gender",
     *       "profile": "profile",
     *       "phone_number_verified": true,
     *       "preferred_username": "preferred_username",
     *       "given_name": "given_name",
     *       "locale": "locale",
     *       "middle_name": "middle_name",
     *       "picture": "picture",
     *       "updated_at": 0,
     *       "name": "name",
     *       "nickname": "nickname",
     *       "phone_number": "phone_number",
     *       "family_name": "family_name",
     *       "email": "email"
     *     }
     */
    oidcUserInfo: {
      /** @description End-User's birthday, represented as an ISO 8601:2004 [ISO8601-2004] YYYY-MM-DD format. The year MAY be 0000, indicating that it is omitted. To represent only the year, YYYY format is allowed. Note that depending on the underlying platform's date related function, providing just year can result in varying month and day, so the implementers need to take this factor into account to correctly process the dates. */
      birthdate?: string;
      /** @description End-User's preferred e-mail address. Its value MUST conform to the
       *     RFC 5322 [RFC5322] addr-spec syntax. The RP MUST NOT rely upon
       *     this value being unique, as discussed in Section 5.7. */
      email?: string;
      /** @description True if the End-User's e-mail address has been verified; otherwise
       *     false. When this Claim Value is true, this means that the OP took
       *     affirmative steps to ensure that this e-mail address was
       *     controlled by the End-User at the time the verification was
       *     performed. The means by which an e-mail address is verified is
       *     context-specific, and dependent upon the trust framework or
       *     contractual agreements within which the parties are operating. */
      email_verified?: boolean;
      /** @description Surname(s) or last name(s) of the End-User. Note that in some
       *     cultures, people can have multiple family names or no family name;
       *     all can be present, with the names being separated by space
       *     characters. */
      family_name?: string;
      /** @description End-User's gender. Values defined by this specification are female
       *     and male. Other values MAY be used when neither of the defined
       *     values are applicable. */
      gender?: string;
      /** @description Given name(s) or first name(s) of the End-User. Note that in some
       *     cultures, people can have multiple given names; all can be
       *     present, with the names being separated by space characters. */
      given_name?: string;
      /** @description End-User's locale, represented as a BCP47 [RFC5646] language tag.
       *     This is typically an ISO 639-1 Alpha-2 [ISO639-1] language code in
       *     lowercase and an ISO 3166-1 Alpha-2 [ISO3166-1] country code in
       *     uppercase, separated by a dash. For example, en-US or fr-CA. As a
       *     compatibility note, some implementations have used an underscore
       *     as the separator rather than a dash, for example, en_US; Relying
       *     Parties MAY choose to accept this locale syntax as well. */
      locale?: string;
      /** @description Middle name(s) of the End-User. Note that in some cultures, people
       *     can have multiple middle names; all can be present, with the names
       *     being separated by space characters. Also note that in some
       *     cultures, middle names are not used. */
      middle_name?: string;
      /** @description End-User's full name in displayable form including all name parts,
       *     possibly including titles and suffixes, ordered according to the
       *     End-User's locale and preferences. */
      name?: string;
      /** @description Casual name of the End-User that may or may not be the same as the
       *     given_name. For instance, a nickname value of Mike might be
       *     returned alongside a given_name value of Michael. */
      nickname?: string;
      /** @description End-User's preferred telephone number. E.164 [E.164] is
       *     RECOMMENDED as the format of this Claim, for example,
       *     +1 (425) 555-1212 or +56 (2) 687 2400. If the phone number
       *     contains an extension, it is RECOMMENDED that the extension be
       *     represented using the RFC 3966 [RFC3966] extension syntax, for
       *     example, +1 (604) 555-1234;ext=5678. */
      phone_number?: string;
      /** @description True if the End-User's phone number has been verified; otherwise
       *     false. When this Claim Value is true, this means that the OP took
       *     affirmative steps to ensure that this phone number was controlled
       *     by the End-User at the time the verification was performed. The
       *     means by which a phone number is verified is context-specific, and
       *     dependent upon the trust framework or contractual agreements
       *     within which the parties are operating. When true, the
       *     phone_number Claim MUST be in E.164 format and any extensions MUST
       *     be represented in RFC 3966 format. */
      phone_number_verified?: boolean;
      /** @description URL of the End-User's profile picture. This URL MUST refer to an
       *     image file (for example, a PNG, JPEG, or GIF image file), rather
       *     than to a Web page containing an image. Note that this URL SHOULD
       *     specifically reference a profile photo of the End-User suitable
       *     for displaying when describing the End-User, rather than an
       *     arbitrary photo taken by the End-User. */
      picture?: string;
      /** @description Non-unique shorthand name by which the End-User wishes to be
       *     referred to at the RP, such as janedoe or j.doe. This value MAY be
       *     any valid JSON string including special characters such as @, /,
       *     or whitespace. */
      preferred_username?: string;
      /** @description URL of the End-User's profile page. The contents of this Web page
       *     SHOULD be about the End-User. */
      profile?: string;
      /** @description Subject - Identifier for the End-User at the IssuerURL. */
      sub?: string;
      /**
       * Format: int64
       * @description Time the End-User's information was last updated. Its value is a
       *     JSON number representing the number of seconds from
       *     1970-01-01T0:0:0Z as measured in UTC until the date/time.
       */
      updated_at?: number;
      /** @description URL of the End-User's Web page or blog. This Web page SHOULD
       *     contain information published by the End-User or an organization
       *     that the End-User is affiliated with. */
      website?: string;
      /** @description String from zoneinfo [zoneinfo] time zone database representing
       *     the End-User's time zone. For example, Europe/Paris or
       *     America/Los_Angeles. */
      zoneinfo?: string;
    };
    revokeOAuth2Token_request: {
      client_id?: string;
      client_secret?: string;
      token: string;
    };
  };
};
export type $defs = { [key: string]: never };
export type operations = {
  discoverJsonWebKeys: {
    parameters: {
      cookie?: never;
      header?: never;
      path?: never;
      query?: never;
    };
    requestBody?: never;
    responses: {
      /** @description jsonWebKeySet */
      200: {
        content: {
          "application/json": components["schemas"]["jsonWebKeySet"];
        };
        headers: {
          [name: string]: unknown;
        };
      };
      /** @description errorOAuth2 */
      default: {
        content: {
          "application/json": components["schemas"]["errorOAuth2"];
        };
        headers: {
          [name: string]: unknown;
        };
      };
    };
  };
  discoverOidcConfiguration: {
    parameters: {
      cookie?: never;
      header?: never;
      path?: never;
      query?: never;
    };
    requestBody?: never;
    responses: {
      /** @description oidcConfiguration */
      200: {
        content: {
          "application/json": components["schemas"]["oidcConfiguration"];
        };
        headers: {
          [name: string]: unknown;
        };
      };
      /** @description errorOAuth2 */
      default: {
        content: {
          "application/json": components["schemas"]["errorOAuth2"];
        };
        headers: {
          [name: string]: unknown;
        };
      };
    };
  };
  getOidcUserInfo: {
    parameters: {
      cookie?: never;
      header?: never;
      path?: never;
      query?: never;
    };
    requestBody?: never;
    responses: {
      /** @description oidcUserInfo */
      200: {
        content: {
          "application/json": components["schemas"]["oidcUserInfo"];
        };
        headers: {
          [name: string]: unknown;
        };
      };
      /** @description errorOAuth2 */
      default: {
        content: {
          "application/json": components["schemas"]["errorOAuth2"];
        };
        headers: {
          [name: string]: unknown;
        };
      };
    };
  };
  oAuth2Authorize: {
    parameters: {
      cookie?: never;
      header?: never;
      path?: never;
      query?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Empty responses are sent when, for example, resources are deleted. The HTTP status code for empty responses is
       *     typically 204. */
      302: {
        content?: never;
        headers: {
          [name: string]: unknown;
        };
      };
      /** @description errorOAuth2 */
      default: {
        content: {
          "application/json": components["schemas"]["errorOAuth2"];
        };
        headers: {
          [name: string]: unknown;
        };
      };
    };
  };
  oauth2TokenExchange: {
    parameters: {
      cookie?: never;
      header?: never;
      path?: never;
      query?: never;
    };
    requestBody?: {
      content: {
        "application/x-www-form-urlencoded": components["schemas"]["oauth2TokenExchange_request"];
      };
    };
    responses: {
      /** @description oAuth2TokenExchange */
      200: {
        content: {
          "application/json": components["schemas"]["oAuth2TokenExchange"];
        };
        headers: {
          [name: string]: unknown;
        };
      };
      /** @description errorOAuth2 */
      default: {
        content: {
          "application/json": components["schemas"]["errorOAuth2"];
        };
        headers: {
          [name: string]: unknown;
        };
      };
    };
  };
  revokeOAuth2Token: {
    parameters: {
      cookie?: never;
      header?: never;
      path?: never;
      query?: never;
    };
    requestBody?: {
      content: {
        "application/x-www-form-urlencoded": components["schemas"]["revokeOAuth2Token_request"];
      };
    };
    responses: {
      /** @description Empty responses are sent when, for example, resources are deleted. The HTTP status code for empty responses is
       *     typically 204. */
      200: {
        content?: never;
        headers: {
          [name: string]: unknown;
        };
      };
      /** @description errorOAuth2 */
      default: {
        content: {
          "application/json": components["schemas"]["errorOAuth2"];
        };
        headers: {
          [name: string]: unknown;
        };
      };
    };
  };
  revokeOidcSession: {
    parameters: {
      cookie?: never;
      header?: never;
      path?: never;
      query?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Empty responses are sent when, for example, resources are deleted. The HTTP status code for empty responses is
       *     typically 204. */
      302: {
        content?: never;
        headers: {
          [name: string]: unknown;
        };
      };
    };
  };
};
